image: Visual Studio 2022
branches:
  only:
    - main
configuration: Release
platform: x64
install:
  - git submodule update --init
before_build:
  - dotnet restore .\Source\NETworkManager.sln
  - ps: |
      # Update the version based on the current date (e.g. 2024.4.27.0)
      $Date = Get-Date
      $VersionString = "$($Date.Year).$($Date.Month).$($Date.Day).0"

      Write-Host "Set NETworkManager version set to $VersionString"

      # Update assembly version
      $PatternVersion = '\[assembly: AssemblyVersion\("(.*)"\)\]'
      $PatternFileVersion = '\[assembly: AssemblyFileVersion\("(.*)"\)\]'

      $AssemblyFile = ".\Source\GlobalAssemblyInfo.cs"

      $AssemlbyContent = Get-Content -Path $AssemblyFile -Encoding utf8
      $AssemlbyContent = $AssemlbyContent -replace $PatternVersion, "[assembly: AssemblyVersion(""$($VersionString)"")]"
      $AssemlbyContent = $AssemlbyContent -replace $PatternFileVersion, "[assembly: AssemblyFileVersion(""$($VersionString)"")]"
      $AssemlbyContent | Set-Content -Path $AssemblyFile -Encoding utf8
      
      # Update inno setup version
      $PatternSetupVersion = '#define MyAppVersion "(.*)"'

      $InnoSetupFile = ".\InnoSetup.iss"

      $SetupContent = Get-Content -Path "$InnoSetupFile" -Encoding utf8
      $SetupContent = $SetupContent -replace $PatternSetupVersion, "#define MyAppVersion ""$($VersionString)"""
      $SetupContent | Set-Content -Path "$InnoSetupFile" -Encoding utf8

build_script:
  - dotnet build .\Source\NETworkManager.sln --configuration Release --no-restore

after_build:
  - ps: |
      if($env:APPVEYOR_REPO_TAG -eq $false) {
        Write-Host "Release build is skipped because no tag was found!"
        return
      }

      # Copy build
      New-Item -Path ".\Build\NETworkManager" -ItemType Directory -Force
      Copy-Item -Path ".\Source\NETworkManager\bin\Release\net8.0-windows10.0.17763.0\win-x64\*" -Destination ".\Build\NETworkManager" -Recurse -Force

      # Cleanup build
      Get-ChildItem -Path ".\Build\NETworkManager" | Where-Object { $_.Name.EndsWith(".pdb") } | Remove-Item
      Remove-Item -Path ".\Build\NETworkManager\WebView2Loader.dll"

      # Version
      $Version = [System.Diagnostics.FileVersionInfo]::GetVersionInfo(".\Build\NETworkManager\NETworkManager.exe").FileVersion

      # Create archive
      Compress-Archive -Path ".\Build\NETworkManager" -DestinationPath ".\Build\NETworkManager_$($Version)_Archive.zip"

artifacts:
  - path: 'Build\NETworkManager_*.*'
