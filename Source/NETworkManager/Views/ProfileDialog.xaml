<UserControl x:Class="NETworkManager.Views.ProfileDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:network="clr-namespace:NETworkManager.Models.Network"
             xmlns:converters="clr-namespace:NETworkManager.Converters"
             xmlns:validators="clr-namespace:NETworkManager.Validators"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:viewModels="clr-namespace:NETworkManager.ViewModels"
             xmlns:localization="clr-namespace:NETworkManager.Resources.Localization"
             xmlns:networkManager="clr-namespace:NETworkManager"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             mc:Ignorable="d" Loaded="UserControl_Loaded" d:DataContext="{d:DesignInstance viewModels:ProfileViewModel}">
    <UserControl.Resources>
        <converters:BooleanReverseConverter x:Key="BooleanReverseConverter" />
        <converters:BooleanReverseToVisibilityCollapsedConverter x:Key="BooleanReverseToVisibilityCollapsedConverter" />
        <converters:BooleanToVisibilityCollapsedConverter x:Key="BooleanToVisibilityCollapsedConverter" />
        <converters:StringIsNotNullOrEmptyOrIPv4AddressToBooleanConverter x:Key="StringIsNotNullOrEmptyOrIPv4AddressToBooleanConverter" />
    </UserControl.Resources>
    <Grid Margin="0,20">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="10" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border BorderThickness="0,0,1,0" BorderBrush="{DynamicResource GrayBrush8}">
                <ScrollViewer ManipulationBoundaryFeedback="ScrollViewer_ManipulationBoundaryFeedback" Style="{StaticResource FadeOutScrollViewer}">
                    <ListBox x:Name="ListBoxViews" ItemsSource="{Binding ProfileViews}" Margin="0,0,10,0">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.Column="0" Width="20" Height="20" Margin="10,0">
                                        <Rectangle.OpacityMask>
                                            <!-- ReSharper disable once Xaml.BindingWithContextNotResolved, can not bind to (networkManager:SettingsViewInfo.Icon) -->
                                            <VisualBrush Stretch="Uniform" Visual="{Binding Icon}" />
                                        </Rectangle.OpacityMask>
                                        <Rectangle.Style>
                                            <Style TargetType="{x:Type Rectangle}">
                                                <Setter Property="Fill" Value="{DynamicResource GrayBrush3}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True" >
                                                        <Setter Property="Fill" Value="{DynamicResource GrayBrush5}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Path=IsSelected,RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True" >
                                                        <Setter Property="Fill" Value="{DynamicResource AccentColorBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Rectangle.Style>
                                    </Rectangle>
                                    <TextBlock Grid.Column="1" Text="{Binding (networkManager:ProfileViewInfo.TranslatedName)}" >
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Setter Property="Foreground" Value="{DynamicResource GrayBrush3}" />
                                                <Setter Property="Margin" Value="0,0,10,0" />
                                                <Setter Property="VerticalAlignment" Value="Center" />
                                                <Setter Property="FontSize" Value="14" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True" >
                                                        <Setter Property="Foreground" Value="{DynamicResource GrayBrush5}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}" Value="True" >
                                                        <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                    <CheckBox Grid.Column="3">
                                        <CheckBox.Style>
                                            <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DefaultCheckBox}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.General}">
                                                        <Setter Property="Visibility" Value="Hidden" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.NetworkInterface}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.NetworkInterface_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.IPScanner}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.IPScanner_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.PortScanner}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.PortScanner_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.Ping}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.Ping_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.Traceroute}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.Traceroute_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.DNSLookup}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.DNSLookup_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.RemoteDesktop}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.RemoteDesktop_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.PowerShell}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.PowerShell_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.PuTTY}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.PuTTY_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.TigerVNC}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.TigerVNC_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.WakeOnLAN}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.WakeOnLAN_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.HTTPHeaders}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.HTTPHeaders_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding (networkManager:ProfileViewInfo.Name)}" Value="{x:Static networkManager:ProfileViewManager+Name.Whois}">
                                                        <Setter Property="IsChecked" Value="{Binding DataContext.Whois_Enabled, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </CheckBox.Style>
                                    </CheckBox>
                                </Grid>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ListBoxItem}">
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                            <Border Background="Transparent" BorderThickness="0">
                                                <Grid MinHeight="30">
                                                    <ContentPresenter />
                                                </Grid>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <!-- BUGFIX This has to be set, to enable mouse wheel scrolling -->
                        <ListBox.Template>
                            <ControlTemplate TargetType="ItemsControl">
                                <Border>
                                    <ItemsPresenter />
                                </Border>
                            </ControlTemplate>
                        </ListBox.Template>
                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel />
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                        <!-- /BUGFIX-->
                    </ListBox>
                </ScrollViewer>
            </Border>
            <TabControl Grid.Column="1" Margin="10" SelectedIndex="{Binding ElementName=ListBoxViews, Path=SelectedIndex}">
                <TabControl.Resources>
                    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource ProfileTabItem}" />
                </TabControl.Resources>
                <TabItem Header="{x:Static localization:Strings.General}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}" HorizontalScrollBarVisibility="Disabled">
                        <StackPanel>
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Name}" />
                                <TextBox x:Name="TextBoxName" GotFocus="TextBoxName_OnGotFocus" TextChanged="TextBoxName_OnTextChanged" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleRemoteDesktopProfileName}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Name" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsEdited}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Name" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                    <validators:IsProfileNameUnique ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxHost" Grid.Column="2" Grid.Row="2" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                    <TextBox.Text>
                                        <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:NoSpacesValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Button Grid.Column="3" Grid.Row="2" Command="{Binding ResolveHostCommand}" ToolTip="{x:Static localization:Strings.ResolveIPv4AddressForThisHost}" IsEnabled="{Binding Host, Converter={StaticResource StringIsNotNullOrEmptyOrIPv4AddressToBooleanConverter}}" Style="{StaticResource CleanButton}" Margin="10,0,0,0">
                                    <Rectangle Width="24" Height="24">
                                        <Rectangle.OpacityMask>
                                            <VisualBrush Stretch="Uniform" Visual="{iconPacks:Material Kind=SearchWeb}" />
                                        </Rectangle.OpacityMask>
                                        <Rectangle.Style>
                                            <Style TargetType="{x:Type Rectangle}">
                                                <Setter Property="Fill" Value="{DynamicResource GrayBrush3}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}, Path=IsMouseOver}" Value="True">
                                                        <Setter Property="Fill" Value="{DynamicResource GrayBrush5}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Rectangle.Style>
                                    </Rectangle>
                                </Button>
                                <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static localization:Strings.Credential}" />
                                <ComboBox x:Name="ComboBoxCredential" Grid.Column="2" Grid.Row="4" SelectedValue="{Binding CredentialID}" DisplayMemberPath="Name" SelectedValuePath="ID" Style="{StaticResource DefaultComboBox}" ItemsSource="{Binding Credentials}">
                                    <ComboBox.InputBindings>
                                        <KeyBinding Command="{Binding UnselectCredentialCommand}" Key="Delete"/>
                                    </ComboBox.InputBindings>
                                </ComboBox>
                                <TextBlock Grid.Column="0" Grid.Row="6" Text="{x:Static localization:Strings.Group}" />
                                <ComboBox x:Name="ComboBoxGroup" Grid.Column="2" Grid.Row="6" Style="{StaticResource EditableComboBox}" ItemsSource="{Binding Groups}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleGroupServers}">
                                    <ComboBox.Text>
                                        <Binding Path="Group" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </ComboBox.Text>
                                </ComboBox>
                                <Rectangle Width="24" Height="24" Grid.Column="3" Grid.Row="4" ToolTip="{x:Static localization:Strings.HelpMessage_Credentials}" Visibility="{Binding ShowUnlockCredentialsHint, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" Style="{StaticResource HelpImageRectangle}" Margin="10,0,0,0">
                                    <Rectangle.Resources>
                                        <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource HelpToolTip}" />
                                    </Rectangle.Resources>
                                </Rectangle>
                                <TextBlock Grid.Column="0" Grid.Row="8" Text="{x:Static localization:Strings.Tags}" />
                                <TextBox Grid.Column="2" Grid.Row="8" Text="{Binding Tags, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleTags}"/>
                                <Rectangle Width="24" Height="24" Grid.Column="3" Grid.Row="8" ToolTip="{x:Static localization:Strings.HelpMessage_Tags}" Style="{StaticResource HelpImageRectangle}" Margin="10,0,0,0">
                                    <Rectangle.Resources>
                                        <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource HelpToolTip}" />
                                    </Rectangle.Resources>
                                </Rectangle>
                            </Grid>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.NetworkInterface}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding NetworkInterface_Enabled}">
                                <RadioButton x:Name="RadioButtonEnableDynamicIPAddress" GroupName="NetworkInterface_IPAddressConfig" IsChecked="{Binding NetworkInterface_EnableDynamicIPAddress}" Content="{x:Static localization:Strings.ObtainAnIPAddressAutomatically}" Margin="0,0,0,10"/>
                                <RadioButton x:Name="RadioButtonEnableStaticIPAddress" GroupName="NetworkInterface_IPAddressConfig" IsChecked="{Binding NetworkInterface_EnableStaticIPAddress}" Content="{x:Static localization:Strings.UseTheFollowingIPAddress}" Margin="0,0,0,10"/>
                                <Grid IsEnabled="{Binding NetworkInterface_EnableStaticIPAddress}" Margin="0,0,0,10">
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.IPv4Address}" />
                                    <TextBox x:Name="TextBoxNetworkInterfaceIPAddress" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleIPv4Address}" >
                                        <TextBox.Text>
                                            <Binding Path="NetworkInterface_IPAddress" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                    <validators:IPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.SubnetmaskOrCIDR}" />
                                    <ComboBox x:Name="ComboBoxNetworkInterfaceSubnetmaskOrCidr" Grid.Column="2" Grid.Row="2" Style="{StaticResource EditableComboBox}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleIPv4SubnetmaskIPv4CIDR}" ItemsSource="{x:Static network:Subnetmask.List}">
                                        <ComboBox.Text>
                                            <Binding Path="NetworkInterface_SubnetmaskOrCidr" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                    <validators:IPv4SubnetmaskOrCIDRValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </ComboBox.Text>
                                    </ComboBox>
                                    <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static localization:Strings.DefaultGateway}" />
                                    <TextBox x:Name="TextBoxNetworkInterfaceGateway" Grid.Column="2" Grid.Row="4" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleIPv4Gateway}" >
                                        <TextBox.Text>
                                            <Binding Path="NetworkInterface_Gateway" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyOrIPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                </Grid>
                                <RadioButton x:Name="RadioButtonEnableDynamicDNS" GroupName="NetworkInterface_DNSServerConfig" Content="{x:Static localization:Strings.ObtainDNSServerAddressAutomatically}" IsChecked="{Binding NetworkInterface_EnableDynamicDNS}" Margin="0,0,0,10" IsEnabled="{Binding NetworkInterface_EnableDynamicIPAddress}" />
                                <RadioButton x:Name="RadioButtonEnableStaticDNS" GroupName="NetworkInterface_DNSServerConfig" Content="{x:Static localization:Strings.UseTheFollowingDNSServerAddresses}" IsChecked="{Binding NetworkInterface_EnableStaticDNS}" Margin="0,0,0,10"/>
                                <Grid IsEnabled="{Binding NetworkInterface_EnableStaticDNS}">
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.PrimaryDNSServer}" />
                                    <TextBox x:Name="TextBoxNetworkInterfacePrimaryDNSServer" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleIPv4Gateway}" >
                                        <TextBox.Text>
                                            <Binding Path="NetworkInterface_PrimaryDNSServer" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyOrIPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.SecondaryDNSServer}" />
                                    <TextBox x:Name="TextBoxNetworkInterfaceSecondaryDNSServer" Grid.Column="2" Grid.Row="2" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleIPv4DNSServer}" >
                                        <TextBox.Text>
                                            <Binding Path="NetworkInterface_SecondaryDNSServer" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyOrIPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.IPScanner}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding IPScanner_Enabled}">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding IPScanner_InheritHost}" />
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.IPRange}" />
                                    <TextBox x:Name="TextBoxIPScannerIPRange" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding IPScanner_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleIPv4SubnetWithCIDR}">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IPScanner_InheritHost}" Value="True">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IPScanner_InheritHost}" Value="False">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="IPScanner_IPRange" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                        <validators:MultipleHostsRangeValidator ValidatesOnTargetUpdated="True" />
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.PortScanner}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding PortScanner_Enabled}">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding PortScanner_InheritHost}" />
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                    <TextBox x:Name="TextBoxPortScannerHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding PortScanner_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding PortScanner_InheritHost}" Value="True">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding PortScanner_InheritHost}" Value="False">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="PortScanner_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                    <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static localization:Strings.Ports}" />
                                    <TextBox x:Name="TextBoxPortScannerPorts" Grid.Column="2" Grid.Row="4" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExamplePortScanRange}">
                                        <TextBox.Text>
                                            <Binding Path="PortScanner_Ports" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                    <validators:PortRangeValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.Ping}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding Ping_Enabled}">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding Ping_InheritHost}" />
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                    <TextBox x:Name="TextBoxPingHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding Ping_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Ping_InheritHost}" Value="True">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Ping_InheritHost}" Value="False">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Ping_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.Traceroute}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding Traceroute_Enabled}">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding Traceroute_InheritHost}" />
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                    <TextBox x:Name="TextBoxTracerouteHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding Traceroute_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Traceroute_InheritHost}" Value="True">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Traceroute_InheritHost}" Value="False">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Traceroute_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.DNSLookup}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding DNSLookup_Enabled}">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding DNSLookup_InheritHost}" />
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                    <TextBox x:Name="TextBoxDNSLookupHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding DNSLookup_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding DNSLookup_InheritHost}" Value="True">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding DNSLookup_InheritHost}" Value="False">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="DNSLookup_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.RemoteDesktop}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding RemoteDesktop_Enabled}">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding RemoteDesktop_InheritHost}" />
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                    <TextBox x:Name="TextBoxRemoteDesktopHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding RemoteDesktop_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding RemoteDesktop_InheritHost}" Value="True">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding RemoteDesktop_InheritHost}" Value="False">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="RemoteDesktop_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                    <TextBlock Grid.Column="0" Grid.Row="6" Grid.ColumnSpan="4" Text="{x:Static localization:Strings.OverrideDefaultSettings}" Style="{StaticResource HeaderTextBlock}" Margin="0,10,0,0"/>
                                    <Separator Grid.Column="0" Grid.Row="8" Grid.ColumnSpan="4" Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                                    <CheckBox Grid.Column="0" Grid.Row="10" VerticalAlignment="Top" Content="{x:Static localization:Strings.Display}" IsChecked="{Binding RemoteDesktop_OverrideDisplay}" Style="{StaticResource DefaultCheckBox}" />
                                    <StackPanel Grid.Column="2" Grid.Row="10" IsEnabled="{Binding RemoteDesktop_OverrideDisplay}">
                                        <RadioButton x:Name="RadioButtonAdjustScreenAutomatically" Content="{x:Static localization:Strings.AdjustScreenAutomatically}" IsChecked="{Binding RemoteDesktop_AdjustScreenAutomatically}" Margin="0,0,0,10" />
                                        <RadioButton x:Name="RadioButtonUseCurrentViewSize" Content="{x:Static localization:Strings.UseCurrentViewSize}" IsChecked="{Binding RemoteDesktop_UseCurrentViewSize}" Margin="0,0,0,10" />
                                        <RadioButton x:Name="RadioButtonFixedScreenSize" Content="{x:Static localization:Strings.FixedScreenSize}" IsChecked="{Binding RemoteDesktop_UseFixedScreenSize}" Margin="0,0,0,10" />
                                        <GroupBox x:Name="GroupBoxFixedScreenSize" Style="{StaticResource WithoutHeaderGroupBox}" IsEnabled="{Binding RemoteDesktop_UseFixedScreenSize}" Margin="25,0,0,10">
                                            <StackPanel>
                                                <TextBlock Text="{x:Static localization:Strings.SelectAScreenResolution}" Style="{DynamicResource DefaultTextBlock}" Margin="0,0,0,10" />
                                                <ComboBox ItemsSource="{Binding RemoteDesktop_ScreenResolutions}" SelectedItem="{Binding RemoteDesktop_SelectedScreenResolution}" />
                                            </StackPanel>
                                        </GroupBox>
                                        <RadioButton x:Name="RadioButtonCustomScreenSize" Content="{x:Static localization:Strings.CustomScreenSize}" IsChecked="{Binding RemoteDesktop_UseCustomScreenSize}" Margin="0,0,0,10" />
                                        <GroupBox Style="{StaticResource WithoutHeaderGroupBox}" Width="{Binding ElementName=GroupBoxFixedScreenSize, Path=ActualWidth}" IsEnabled="{Binding RemoteDesktop_UseCustomScreenSize}" Margin="25,0,0,10">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="10" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="10" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Width}" Style="{StaticResource CenterTextBlock}" />
                                                <TextBox Grid.Column="2" Grid.Row="0">
                                                    <TextBox.Text>
                                                        <Binding Path="RemoteDesktop_CustomScreenWidth" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                            <Binding.ValidationRules>
                                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                <validators:Int32Validator ValidatesOnTargetUpdated="True" />
                                                            </Binding.ValidationRules>
                                                        </Binding>
                                                    </TextBox.Text>
                                                </TextBox>
                                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Height}" Style="{StaticResource CenterTextBlock}" />
                                                <TextBox Grid.Column="2" Grid.Row="2">
                                                    <TextBox.Text>
                                                        <Binding Path="RemoteDesktop_CustomScreenHeight" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                            <Binding.ValidationRules>
                                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                <validators:Int32Validator ValidatesOnTargetUpdated="True" />
                                                            </Binding.ValidationRules>
                                                        </Binding>
                                                    </TextBox.Text>
                                                </TextBox>
                                            </Grid>
                                        </GroupBox>
                                    </StackPanel>
                                    <CheckBox Grid.Column="0" Grid.Row="12" Content="{x:Static localization:Strings.ColorDepthBit}" IsChecked="{Binding RemoteDesktop_OverrideColorDepth}" Style="{StaticResource DefaultCheckBox}" />
                                    <ComboBox Grid.Column="2" Grid.Row="12" ItemsSource="{Binding RemoteDesktop_ColorDepths}" SelectedItem="{Binding RemoteDesktop_SelectedColorDepth}" IsEnabled="{Binding RemoteDesktop_OverrideColorDepth}"/>
                                    <CheckBox Grid.Column="0" Grid.Row="14" Content="{x:Static localization:Strings.Port}" IsChecked="{Binding RemoteDesktop_OverridePort}" Style="{StaticResource DefaultCheckBox}" />
                                    <TextBox Grid.Column="2" Grid.Row="14" x:Name="TextBoxRemoteDesktopPort" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExamplePort3389}" IsEnabled="{Binding RemoteDesktop_OverridePort}" Style="{StaticResource DefaultTextBox}">
                                        <TextBox.Text>
                                            <Binding Path="RemoteDesktop_Port" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                    <validators:PortValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <CheckBox Grid.Column="0" Grid.Row="16" Content="{x:Static localization:Strings.CredentialSecuritySupportProvider}" IsChecked="{Binding RemoteDesktop_OverrideCredSspSupport}" Style="{StaticResource DefaultCheckBox}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="16" OffLabel="" OnLabel="" IsChecked="{Binding RemoteDesktop_EnableCredSspSupport}" IsEnabled="{Binding RemoteDesktop_OverrideCredSspSupport}" />
                                    <CheckBox Grid.Column="0" Grid.Row="18" Content="{x:Static localization:Strings.AuthenticationLevel}" IsChecked="{Binding RemoteDesktop_OverrideAuthenticationLevel}" Style="{StaticResource DefaultCheckBox}" />
                                    <mah:NumericUpDown Grid.Column="2" Grid.Row="18" Value="{Binding RemoteDesktop_AuthenticationLevel}" Maximum="3" Minimum="0" Interval="1" IsEnabled="{Binding RemoteDesktop_OverrideAuthenticationLevel}" />
                                    <Rectangle Grid.Column="3" Grid.Row="18" Width="24" Height="24" ToolTip="{x:Static localization:Strings.HelpMessage_RDPAuthenticationLevel}" Style="{StaticResource HelpImageRectangle}" Margin="10,0,0,0">
                                        <Rectangle.Resources>
                                            <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource HelpToolTip}" />
                                        </Rectangle.Resources>
                                    </Rectangle>
                                    <CheckBox Grid.Column="0" Grid.Row="20" Content="{x:Static localization:Strings.ApplyWindowsKeyCombinations}" IsChecked="{Binding RemoteDesktop_OverrideApplyWindowsKeyCombinations}" Style="{StaticResource DefaultCheckBox}" />
                                    <ComboBox Grid.Column="2" Grid.Row="20" ItemsSource="{Binding RemoteDesktop_KeyboardHookModes}" DisplayMemberPath="Item2" SelectedItem="{Binding RemoteDesktop_KeyboardHookMode}" IsEnabled="{Binding RemoteDesktop_OverrideApplyWindowsKeyCombinations}" />
                                    <CheckBox Grid.Column="0" Grid.Row="22" Content="{x:Static localization:Strings.RedirectClipboard}" IsChecked="{Binding RemoteDesktop_OverrideRedirectClipboard}" Style="{StaticResource DefaultCheckBox}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="22" OffLabel="" OnLabel="" IsChecked="{Binding RemoteDesktop_RedirectClipboard}" IsEnabled="{Binding RemoteDesktop_OverrideRedirectClipboard}" />
                                    <CheckBox Grid.Column="0" Grid.Row="24" Content="{x:Static localization:Strings.RedirectDevices}" IsChecked="{Binding RemoteDesktop_OverrideRedirectDevices}" Style="{StaticResource DefaultCheckBox}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="24" OffLabel="" OnLabel="" IsChecked="{Binding RemoteDesktop_RedirectDevices}" IsEnabled="{Binding RemoteDesktop_OverrideRedirectDevices}" />
                                    <CheckBox Grid.Column="0" Grid.Row="26" Content="{x:Static localization:Strings.RedirectDrives}" IsChecked="{Binding RemoteDesktop_OverrideRedirectDrives}" Style="{StaticResource DefaultCheckBox}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="26" OffLabel="" OnLabel="" IsChecked="{Binding RemoteDesktop_RedirectDrives}" IsEnabled="{Binding RemoteDesktop_OverrideRedirectDrives}"/>
                                    <CheckBox Grid.Column="0" Grid.Row="28" Content="{x:Static localization:Strings.RedirectPorts}" IsChecked="{Binding RemoteDesktop_OverrideRedirectPorts}" Style="{StaticResource DefaultCheckBox}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="28" OffLabel="" OnLabel="" IsChecked="{Binding RemoteDesktop_RedirectPorts}" IsEnabled="{Binding RemoteDesktop_OverrideRedirectPorts}" />
                                    <CheckBox Grid.Column="0" Grid.Row="30" Content="{x:Static localization:Strings.RedirectSmartcards}" IsChecked="{Binding RemoteDesktop_OverrideRedirectSmartcards}" Style="{StaticResource DefaultCheckBox}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="30" OffLabel="" OnLabel="" IsChecked="{Binding RemoteDesktop_RedirectSmartCards}" IsEnabled="{Binding RemoteDesktop_OverrideRedirectSmartcards}" />
                                    <CheckBox Grid.Column="0" Grid.Row="32" Content="{x:Static localization:Strings.RedirectPrinters}" IsChecked="{Binding RemoteDesktop_OverrideRedirectPrinters}" Style="{StaticResource DefaultCheckBox}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="32" OffLabel="" OnLabel="" IsChecked="{Binding RemoteDesktop_RedirectPrinters}" IsEnabled="{Binding RemoteDesktop_OverrideRedirectPrinters}" />
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.PowerShell}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel IsEnabled="{Binding PowerShell_Enabled}" Margin="0,0,0,20">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.RemoteConsole}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding PowerShell_EnableRemoteConsole}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="2" OnLabel="" OffLabel="" IsChecked="{Binding PowerShell_InheritHost}" IsEnabled="{Binding PowerShell_EnableRemoteConsole}" />
                                <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxPowerShellHost" Grid.Column="2" Grid.Row="4" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding PowerShell_Enabled}" Value="False">
                                                    <Setter Property="IsEnabled" Value="False" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding PowerShell_EnableRemoteConsole}" Value="False">
                                                    <Setter Property="IsEnabled" Value="False" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding PowerShell_InheritHost}" Value="True">
                                                    <Setter Property="IsEnabled" Value="False" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding PowerShell_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding PowerShell_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="PowerShell_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="6" Grid.ColumnSpan="4" Text="{x:Static localization:Strings.OverrideDefaultSettings}" Style="{StaticResource HeaderTextBlock}" Margin="0,10,0,0"/>
                                <Separator Grid.Column="0" Grid.Row="8" Grid.ColumnSpan="4" Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                                <CheckBox Grid.Column="0" Grid.Row="10" Content="{x:Static localization:Strings.AdditionalCommandLine}" IsChecked="{Binding PowerShell_OverrideAdditionalCommandLine}" Style="{StaticResource DefaultCheckBox}" />
                                <TextBox x:Name="TextBoxAdditionalCommandLine" Grid.Column="2" Grid.Row="10" Text="{Binding PowerShell_AdditionalCommandLine, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding PowerShell_OverrideAdditionalCommandLine}" Style="{StaticResource DefaultTextBox}" />
                                <CheckBox Grid.Column="0" Grid.Row="12" Content="{x:Static localization:Strings.ExecutionPolicy}" IsChecked="{Binding PowerShell_OverrideExecutionPolicy}" Style="{StaticResource DefaultCheckBox}" />
                                <ComboBox x:Name="ComboBoxTypes" Grid.Column="2" Grid.Row="12" ItemsSource="{Binding PowerShell_ExecutionPolicies}" SelectedItem="{Binding PowerShell_ExecutionPolicy}" IsEnabled="{Binding PowerShell_OverrideExecutionPolicy}" />
                            </Grid>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.PuTTY}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}" HorizontalScrollBarVisibility="Disabled">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding PuTTY_Enabled}">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Mode}" />
                                    <WrapPanel Grid.Column="2" Grid.Row="0" Orientation="Horizontal">
                                        <WrapPanel.Resources>
                                            <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource DefaultRadioButton}">
                                                <Setter Property="Margin" Value="0,5,10,5" />
                                            </Style>
                                        </WrapPanel.Resources>
                                        <RadioButton Content="{x:Static localization:Strings.SSH}" IsChecked="{Binding PuTTY_UseSSH}" />
                                        <RadioButton Content="{x:Static localization:Strings.Telnet}" IsChecked="{Binding PuTTY_UseTelnet}" />
                                        <RadioButton Content="{x:Static localization:Strings.Serial}" IsChecked="{Binding PuTTY_UseSerial}" />
                                        <RadioButton Content="{x:Static localization:Strings.Rlogin}" IsChecked="{Binding PuTTY_UseRlogin}" />
                                        <RadioButton Content="{x:Static localization:Strings.RAW}" IsChecked="{Binding PuTTY_UseRAW}" />
                                    </WrapPanel>
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.InheritHostFromDefault}" Visibility="{Binding PuTTY_UseSerial, Converter={StaticResource BooleanReverseToVisibilityCollapsedConverter}}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="2" OnLabel="" OffLabel="" Visibility="{Binding PuTTY_UseSerial, Converter={StaticResource BooleanReverseToVisibilityCollapsedConverter}}" IsChecked="{Binding PuTTY_InheritHost}" />
                                    <TextBlock Grid.Column="0" Grid.Row="4">
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}">
                                                <Setter Property="Text" Value="{x:Static localization:Strings.Host}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding PuTTY_UseSerial}" Value="True">
                                                        <Setter Property="Text" Value="{x:Static localization:Strings.SerialLine}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                    <TextBox x:Name="TextBoxPuTTYHostOrSerialLine" Grid.Column="2" Grid.Row="4" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                                <Setter Property="Text">
                                                    <Setter.Value>
                                                        <Binding Path="PuTTY_HostOrSerialLine" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                            <Binding.ValidationRules>
                                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                <validators:NoSpacesValidator ValidatesOnTargetUpdated="True" />
                                                            </Binding.ValidationRules>
                                                        </Binding>
                                                    </Setter.Value>
                                                </Setter>
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding PuTTY_InheritHost}" Value="True" />
                                                            <Condition Binding="{Binding PuTTY_UseSerial}" Value="False" />
                                                        </MultiDataTrigger.Conditions>
                                                        <MultiDataTrigger.Setters>
                                                            <Setter Property="IsEnabled" Value="False" />
                                                            <Setter Property="TextBox.Text">
                                                                <Setter.Value>
                                                                    <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                                </Setter.Value>
                                                            </Setter>
                                                        </MultiDataTrigger.Setters>
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                    <TextBlock Grid.Column="0" Grid.Row="6" Grid.ColumnSpan="4" Text="{x:Static localization:Strings.OverrideDefaultSettings}" Style="{StaticResource HeaderTextBlock}" Margin="0,10,0,0"/>
                                    <Separator Grid.Column="0" Grid.Row="8" Grid.ColumnSpan="4" Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                                    <CheckBox Grid.Column="0" Grid.Row="10" IsChecked="{Binding PuTTY_OverridePortOrBaud}">
                                        <CheckBox.Style>
                                            <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DefaultCheckBox}">
                                                <Setter Property="Content" Value="{x:Static localization:Strings.Port}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding PuTTY_UseSerial}" Value="True">
                                                        <Setter Property="Content" Value="{x:Static localization:Strings.Baud}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </CheckBox.Style>
                                    </CheckBox>
                                    <TextBox x:Name="TextBoxPuTTYPort" Grid.Column="2" Grid.Row="10" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExamplePort22}" Visibility="{Binding PuTTY_UseSerial, Converter={StaticResource BooleanReverseToVisibilityCollapsedConverter}}" IsEnabled="{Binding PuTTY_OverridePortOrBaud}">
                                        <TextBox.Text>
                                            <Binding Path="PuTTY_PortOrBaud" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                    <validators:PortValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <TextBox x:Name="TextBoxPuTTYBaud" Grid.Column="2" Grid.Row="10" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExamplePort22}" Visibility="{Binding PuTTY_UseSerial, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" IsEnabled="{Binding PuTTY_OverridePortOrBaud}">
                                        <TextBox.Text>
                                            <Binding Path="PuTTY_PortOrBaud" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                    <validators:BaudValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <CheckBox Grid.Column="0" Grid.Row="12" Content="{x:Static localization:Strings.Username}" IsChecked="{Binding PuTTY_OverrideUsername}" Style="{StaticResource DefaultCheckBox}" />
                                    <TextBox Grid.Column="2" Grid.Row="12" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleUsername}" IsEnabled="{Binding PuTTY_OverrideUsername}">
                                        <TextBox.Text>
                                            <Binding Path="PuTTY_Username" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:NoSpacesValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <CheckBox Grid.Column="0" Grid.Row="14" Content="{x:Static localization:Strings.Profile}" IsChecked="{Binding PuTTY_OverrideProfile}" Style="{StaticResource DefaultCheckBox}" />
                                    <TextBox Grid.Column="2" Grid.Row="14" IsEnabled="{Binding PuTTY_OverrideProfile}">
                                        <TextBox.Text>
                                            <Binding Path="PuTTY_Profile" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:NoSpacesValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <CheckBox Grid.Column="0" Grid.Row="16" Content="{x:Static localization:Strings.AdditionalCommandLine}" IsChecked="{Binding PuTTY_OverrideAdditionalCommandLine}" Style="{StaticResource DefaultCheckBox}"/>
                                    <TextBox Grid.Column="2" Grid.Row="16" Text="{Binding PuTTY_AdditionalCommandLine}" IsEnabled="{Binding PuTTY_OverrideAdditionalCommandLine}" Style="{StaticResource DefaultTextBox}" />
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.TigerVNC}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel IsEnabled="{Binding TigerVNC_Enabled}" Margin="0,0,0,20">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding TigerVNC_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxTigerVNCHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding TigerVNC_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding TigerVNC_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding TigerVNC_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="TigerVNC_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="4" Grid.ColumnSpan="4" Text="{x:Static localization:Strings.OverrideDefaultSettings}" Style="{StaticResource HeaderTextBlock}" Margin="0,10,0,0"/>
                                <Separator Grid.Column="0" Grid.Row="6" Grid.ColumnSpan="4" Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                                <CheckBox Grid.Column="0" Grid.Row="8" Content="{x:Static localization:Strings.Port}" IsChecked="{Binding TigerVNC_OverridePort}" Style="{StaticResource DefaultCheckBox}" />
                                <TextBox x:Name="TextBoxTigerVNCPort" Grid.Column="2" Grid.Row="8" IsEnabled="{Binding TigerVNC_OverridePort}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExamplePort5900}">
                                    <TextBox.Text>
                                        <Binding Path="TigerVNC_Port" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:PortValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.WakeOnLAN}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel IsEnabled="{Binding WakeOnLAN_Enabled}" Margin="0,0,0,20">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.MACAddress}" />
                                <TextBox x:Name="TextBoxWakeOnLANMACAddress" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleMACAddress}">
                                    <TextBox.Text>
                                        <Binding Path="WakeOnLAN_MACAddress" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:MACAddressValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Broadcast}" />
                                <TextBox x:Name="TextBoxWakeOnLANBroadcast" Grid.Column="2" Grid.Row="2" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleIPv4Broadcast}">
                                    <TextBox.Text>
                                        <Binding Path="WakeOnLAN_Broadcast" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:IPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="4" Grid.ColumnSpan="4" Text="{x:Static localization:Strings.OverrideDefaultSettings}" Style="{StaticResource HeaderTextBlock}" Margin="0,10,0,0"/>
                                <Separator Grid.Column="0" Grid.Row="6" Grid.ColumnSpan="4" Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                                <CheckBox Grid.Column="0" Grid.Row="8" Content="{x:Static localization:Strings.Port}" IsChecked="{Binding WakeOnLAN_OverridePort}" Style="{StaticResource DefaultCheckBox}" />
                                <TextBox x:Name="TextBoxWakeOnLANPort" Grid.Column="2" Grid.Row="8" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExamplePort7}" IsEnabled="{Binding WakeOnLAN_OverridePort}">
                                    <TextBox.Text>
                                        <Binding Path="WakeOnLAN_Port" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:PortValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.HTTPHeaders}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding HTTPHeaders_Enabled}">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Host}" />
                                    <TextBox x:Name="TextBoxHTTPHeadersWebsite" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleWebsiteUri}">
                                        <TextBox.Text>
                                            <Binding Path="HTTPHeaders_Website" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                <Binding.ValidationRules>
                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                    <validators:HttpAndHttpsUriValidator ValidatesOnTargetUpdated="True" />
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static localization:Strings.Whois}">
                    <ScrollViewer Style="{StaticResource DefaultScrollViewer}">
                        <StackPanel>
                            <StackPanel IsEnabled="{Binding Whois_Enabled}">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="10" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="10" />
                                        <ColumnDefinition Width="1*" />
                                        <ColumnDefinition Width="34" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                    <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding Whois_InheritHost}" />
                                    <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Domain}" />
                                    <TextBox x:Name="TextBoxWhoisDomain" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding Whois_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:StaticStrings.ExampleHostname}">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Whois_InheritHost}" Value="True">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Whois_InheritHost}" Value="False">
                                                        <Setter Property="TextBox.Text">
                                                            <Setter.Value>
                                                                <Binding Path="Whois_Domain" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                    <Binding.ValidationRules>
                                                                        <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                    </Binding.ValidationRules>
                                                                </Binding>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>
            </TabControl>
        </Grid>
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Content="{x:Static localization:Strings.Cancel}" Command="{Binding CancelCommand}" IsCancel="True" Style="{StaticResource DefaultButton}" />
            <Button Content="{x:Static localization:Strings.Save}" Command="{Binding SaveCommand}" IsDefault="True" Margin="10,0,0,0">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource HighlightedButton}">
                        <Style.Triggers>
                            <!-- General -->
                            <DataTrigger Binding="{Binding ElementName=TextBoxName,Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=TextBoxHost,Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=ComboBoxGroup,Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <!-- Network Interface -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticIPAddress}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxNetworkInterfaceIPAddress, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticIPAddress}" Value="True" />
                                    <Condition Binding="{Binding ElementName=ComboBoxNetworkInterfaceSubnetmaskOrCidr, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticIPAddress}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxNetworkInterfaceGateway, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticDNS}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxNetworkInterfacePrimaryDNSServer, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticDNS}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxNetworkInterfaceSecondaryDNSServer, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- IP Scanner -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IPScanner_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding IPScanner_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxIPScannerIPRange, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Port Scanner -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PortScanner_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding PortScanner_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxPortScannerHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PortScanner_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxPortScannerPorts, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Ping -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Ping_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding Ping_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxPingHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Traceroute -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Traceroute_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding Traceroute_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxTracerouteHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- DNS Lookup -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding DNSLookup_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding DNSLookup_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxDNSLookupHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Remote Desktop -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RemoteDesktop_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding RemoteDesktop_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxRemoteDesktopHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RemoteDesktop_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding RemoteDesktop_OverridePort}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxRemoteDesktopPort, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- PowerShell -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PowerShell_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding PowerShell_EnableRemoteConsole}" Value="True"/>
                                    <Condition Binding="{Binding PowerShell_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxPowerShellHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- PuTTY -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PuTTY_Enabled}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_InheritHost}" Value="False" />
                                    <Condition Binding="{Binding PuTTY_UseSerial}" Value="False" />
                                    <Condition Binding="{Binding ElementName=TextBoxPuTTYHostOrSerialLine, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PuTTY_Enabled}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_UseSerial}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxPuTTYHostOrSerialLine, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PuTTY_Enabled}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_OverridePortOrBaud}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_UseSerial}" Value="False" />
                                    <Condition Binding="{Binding ElementName=TextBoxPuTTYPort, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PuTTY_Enabled}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_OverridePortOrBaud}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_UseSerial}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxPuTTYBaud, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- TigerVNC -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding TigerVNC_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding TigerVNC_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxTigerVNCHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding TigerVNC_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxTigerVNCPort, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Wake on LAN -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding WakeOnLAN_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxWakeOnLANMACAddress, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding WakeOnLAN_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxWakeOnLANBroadcast, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding WakeOnLAN_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxWakeOnLANPort, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- HTTPHeaders -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding HTTPHeaders_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxHTTPHeadersWebsite, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Whois -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Whois_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding Whois_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxWhoisDomain, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>
    </Grid>
</UserControl>