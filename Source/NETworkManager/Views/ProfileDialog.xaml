<UserControl x:Class="NETworkManager.Views.ProfileDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:network="clr-namespace:NETworkManager.Models.Network"
             xmlns:converters="clr-namespace:NETworkManager.Converters"
             xmlns:validators="clr-namespace:NETworkManager.Validators"
             xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:viewModels="clr-namespace:NETworkManager.ViewModels"
             xmlns:localization="clr-namespace:NETworkManager.Resources.Localization"
             mc:Ignorable="d" Loaded="UserControl_Loaded" d:DataContext="{d:DesignInstance viewModels:ProfileViewModel}">
    <UserControl.Resources>
        <converters:BooleanReverseConverter x:Key="BooleanReverseConverter" />
        <converters:BooleanReverseToVisibilityCollapsedConverter x:Key="BooleanReverseToVisibilityCollapsedConverter" />
        <converters:BooleanToVisibilityCollapsedConverter x:Key="BooleanToVisibilityCollapsedConverter" />
    </UserControl.Resources>
    <Grid Margin="0,20">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="10" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <TabControl Margin="0,0,0,20">
            <TabControl.Resources>
                <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource ProfileTabItem}" />
            </TabControl.Resources>
            <TabItem Header="{x:Static localization:Strings.General}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0" HorizontalScrollBarVisibility="Disabled">
                    <StackPanel>
                        <Grid>
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Name}" />
                            <TextBox x:Name="TextBoxName" GotFocus="TextBoxName_OnGotFocus" TextChanged="TextBoxName_OnTextChanged" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleRemoteDesktopProfileName}">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsEdited}" Value="True">
                                                <Setter Property="TextBox.Text">
                                                    <Setter.Value>
                                                        <Binding Path="Name" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                            <Binding.ValidationRules>
                                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                            </Binding.ValidationRules>
                                                        </Binding>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding IsEdited}" Value="False">
                                                <Setter Property="TextBox.Text">
                                                    <Setter.Value>
                                                        <Binding Path="Name" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                            <Binding.ValidationRules>
                                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                <validators:IsProfileNameUnique ValidatesOnTargetUpdated="True" />
                                                            </Binding.ValidationRules>
                                                        </Binding>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                            <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                            <TextBox x:Name="TextBoxHost" Grid.Column="2" Grid.Row="2" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleHostname}">
                                <TextBox.Text>
                                    <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                            <validators:NoSpacesValidator ValidatesOnTargetUpdated="True" />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                            <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static localization:Strings.Credential}" />
                            <ComboBox x:Name="ComboBoxCredential" Grid.Column="2" Grid.Row="4" SelectedValue="{Binding CredentialID}" DisplayMemberPath="Name" SelectedValuePath="ID" Style="{StaticResource DefaultComboBox}" ItemsSource="{Binding Credentials}">
                                <ComboBox.InputBindings>
                                    <KeyBinding Command="{Binding UnselectCredentialCommand}" Key="Delete"/>
                                </ComboBox.InputBindings>
                            </ComboBox>
                            <TextBlock Grid.Column="0" Grid.Row="6" Text="{x:Static localization:Strings.Group}" />
                            <ComboBox x:Name="ComboBoxGroup" Grid.Column="2" Grid.Row="6" Style="{StaticResource EditableComboBox}" ItemsSource="{Binding Groups}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleGroupServers}">
                                <ComboBox.Text>
                                    <Binding Path="Group" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                        <Binding.ValidationRules>
                                            <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </ComboBox.Text>
                            </ComboBox>
                            <Rectangle Width="24" Height="24" Grid.Column="3" Grid.Row="4" ToolTip="{x:Static localization:Strings.HelpMessage_Credentials}" Visibility="{Binding ShowUnlockCredentialsHint, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" Style="{StaticResource HelpImageRectangle}" Margin="10,0,0,0">
                                <Rectangle.Resources>
                                    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource HelpToolTip}" />
                                </Rectangle.Resources>
                            </Rectangle>
                            <TextBlock Grid.Column="0" Grid.Row="8" Text="{x:Static localization:Strings.Tags}" />
                            <TextBox Grid.Column="2" Grid.Row="8" Text="{Binding Tags, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleTags}"/>
                            <Rectangle Width="24" Height="24" Grid.Column="3" Grid.Row="8" ToolTip="{x:Static localization:Strings.HelpMessage_Tags}" Style="{StaticResource HelpImageRectangle}" Margin="10,0,0,0">
                                <Rectangle.Resources>
                                    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource HelpToolTip}" />
                                </Rectangle.Resources>
                            </Rectangle>
                        </Grid>
                        <TextBlock Text="{x:Static localization:Strings.EnableTheProfileInAtLeastOneTool}" TextWrapping="Wrap" Visibility="{Binding IsTabEnabled, Converter={StaticResource BooleanReverseToVisibilityCollapsedConverter}}" Style="{DynamicResource AccentTextBlock}" Margin="0,20,0,0"/>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.NetworkInterface}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding NetworkInterface_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding NetworkInterface_Enabled}">
                            <RadioButton x:Name="RadioButtonEnableDynamicIPAddress" GroupName="NetworkInterface_IPAddressConfig" IsChecked="{Binding NetworkInterface_EnableDynamicIPAddress}" Content="{x:Static localization:Strings.ObtainAnIPAddressAutomatically}" Margin="0,0,0,10"/>
                            <RadioButton x:Name="RadioButtonEnableStaticIPAddress" GroupName="NetworkInterface_IPAddressConfig" IsChecked="{Binding NetworkInterface_EnableStaticIPAddress}" Content="{x:Static localization:Strings.UseTheFollowingIPAddress}" Margin="0,0,0,10"/>
                            <Grid IsEnabled="{Binding NetworkInterface_EnableStaticIPAddress}" Margin="0,0,0,10">
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.IPv4Address}" />
                                <TextBox x:Name="TextBoxNetworkInterfaceIPAddress" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleIPv4Address}" >
                                    <TextBox.Text>
                                        <Binding Path="NetworkInterface_IPAddress" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:IPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.SubnetmaskOrCIDR}" />
                                <ComboBox x:Name="ComboBoxNetworkInterfaceSubnetmaskOrCidr" Grid.Column="2" Grid.Row="2" Style="{StaticResource EditableComboBox}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleIPv4SubnetmaskIPv4CIDR}" ItemsSource="{x:Static network:Subnetmask.List}">
                                    <ComboBox.Text>
                                        <Binding Path="NetworkInterface_SubnetmaskOrCidr" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:IPv4SubnetmaskOrCIDRValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </ComboBox.Text>
                                </ComboBox>
                                <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static localization:Strings.DefaultGateway}" />
                                <TextBox x:Name="TextBoxNetworkInterfaceGateway" Grid.Column="2" Grid.Row="4" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleIPv4Gateway}" >
                                    <TextBox.Text>
                                        <Binding Path="NetworkInterface_Gateway" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyOrIPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                            <RadioButton x:Name="RadioButtonEnableDynamicDNS" GroupName="NetworkInterface_DNSServerConfig" Content="{x:Static localization:Strings.ObtainDNSServerAddressAutomatically}" IsChecked="{Binding NetworkInterface_EnableDynamicDNS}" Margin="0,0,0,10" IsEnabled="{Binding NetworkInterface_EnableDynamicIPAddress}" />
                            <RadioButton x:Name="RadioButtonEnableStaticDNS" GroupName="NetworkInterface_DNSServerConfig" Content="{x:Static localization:Strings.UseTheFollowingDNSServerAddresses}" IsChecked="{Binding NetworkInterface_EnableStaticDNS}" Margin="0,0,0,10"/>
                            <Grid IsEnabled="{Binding NetworkInterface_EnableStaticDNS}">
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.PrimaryDNSServer}" />
                                <TextBox x:Name="TextBoxNetworkInterfacePrimaryDNSServer" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleIPv4Gateway}" >
                                    <TextBox.Text>
                                        <Binding Path="NetworkInterface_PrimaryDNSServer" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyOrIPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.SecondaryDNSServer}" />
                                <TextBox x:Name="TextBoxNetworkInterfaceSecondaryDNSServer" Grid.Column="2" Grid.Row="2" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleIPv4DNSServer}" >
                                    <TextBox.Text>
                                        <Binding Path="NetworkInterface_SecondaryDNSServer" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyOrIPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.IPScanner}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding IPScanner_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding IPScanner_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding IPScanner_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.IPRange}" />
                                <TextBox x:Name="TextBoxIPScannerIPRange" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding IPScanner_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleIPv4SubnetWithCIDR}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IPScanner_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IPScanner_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="IPScanner_IPRange" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                    <validators:IPScanRangeValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.PortScanner}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding PortScanner_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding PortScanner_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding PortScanner_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxPortScannerHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding PortScanner_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding PortScanner_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding PortScanner_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="PortScanner_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static localization:Strings.Ports}" />
                                <TextBox x:Name="TextBoxPortScannerPorts" Grid.Column="2" Grid.Row="4" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExamplePortScanRange}">
                                    <TextBox.Text>
                                        <Binding Path="PortScanner_Ports" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:PortRangeValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.Ping}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding Ping_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding Ping_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding Ping_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxPingHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding Ping_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Ping_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Ping_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Ping_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.Traceroute}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding Traceroute_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding Traceroute_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding Traceroute_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxTracerouteHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding Traceroute_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Traceroute_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Traceroute_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Traceroute_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.DNSLookup}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding DNSLookup_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding DNSLookup_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding DNSLookup_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxDNSLookupHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding DNSLookup_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding DNSLookup_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding DNSLookup_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="DNSLookup_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.RemoteDesktop}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding RemoteDesktop_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding RemoteDesktop_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding RemoteDesktop_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxRemoteDesktopHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding RemoteDesktop_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RemoteDesktop_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RemoteDesktop_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="RemoteDesktop_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.PuTTY}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0" HorizontalScrollBarVisibility="Disabled">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding PuTTY_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding PuTTY_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Mode}" />
                                <WrapPanel Grid.Column="2" Grid.Row="0" Orientation="Horizontal">
                                    <WrapPanel.Resources>
                                        <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource DefaultRadioButton}">
                                            <Setter Property="Margin" Value="0,5,10,5" />
                                        </Style>
                                    </WrapPanel.Resources>
                                    <RadioButton Content="{x:Static localization:Strings.SSH}" IsChecked="{Binding PuTTY_UseSSH}" />
                                    <RadioButton Content="{x:Static localization:Strings.Telnet}" IsChecked="{Binding PuTTY_UseTelnet}" />
                                    <RadioButton Content="{x:Static localization:Strings.Serial}" IsChecked="{Binding PuTTY_UseSerial}" />
                                    <RadioButton Content="{x:Static localization:Strings.Rlogin}" IsChecked="{Binding PuTTY_UseRlogin}" />
                                    <RadioButton Content="{x:Static localization:Strings.RAW}" IsChecked="{Binding PuTTY_UseRAW}" />
                                </WrapPanel>
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.InheritHostFromDefault}" Visibility="{Binding PuTTY_UseSerial, Converter={StaticResource BooleanReverseToVisibilityCollapsedConverter}}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="2" OnLabel="" OffLabel="" Visibility="{Binding PuTTY_UseSerial, Converter={StaticResource BooleanReverseToVisibilityCollapsedConverter}}" IsChecked="{Binding PuTTY_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="4">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}">
                                            <Setter Property="Text" Value="{x:Static localization:Strings.Host}" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding PuTTY_UseSerial}" Value="True">
                                                    <Setter Property="Text" Value="{x:Static localization:Strings.SerialLine}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                                <TextBox x:Name="TextBoxPuTTYHost" Grid.Column="2" Grid.Row="4" IsEnabled="{Binding PuTTY_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding PuTTY_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding PuTTY_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="PuTTY_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                    <validators:NoSpacesValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                                <TextBox x:Name="TextBoxPuTTYSerialLine" Grid.Column="2" Grid.Row="4" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleSerialLine}" Visibility="{Binding PuTTY_UseSerial, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                                    <TextBox.Text>
                                        <Binding Path="PuTTY_SerialLine" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:NoSpacesValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="6">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}">
                                            <Setter Property="Text" Value="{x:Static localization:Strings.Port}" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding PuTTY_UseSerial}" Value="True">
                                                    <Setter Property="Text" Value="{x:Static localization:Strings.Baud}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                                <TextBox x:Name="TextBoxPuTTYPort" Grid.Column="2" Grid.Row="6" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExamplePort22}" Visibility="{Binding PuTTY_UseSerial, Converter={StaticResource BooleanReverseToVisibilityCollapsedConverter}}">
                                    <TextBox.Text>
                                        <Binding Path="PuTTY_Port" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:PortValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBox x:Name="TextBoxPuTTYBaud" Grid.Column="2" Grid.Row="6" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleBaud9600}" Visibility="{Binding PuTTY_UseSerial, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                                    <TextBox.Text>
                                        <Binding Path="PuTTY_Baud" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:BaudValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="8" Text="{x:Static localization:Strings.Username}" />
                                <TextBox Grid.Column="2" Grid.Row="8" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleUsername}">
                                    <TextBox.Text>
                                        <Binding Path="PuTTY_Username" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:NoSpacesValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="10" Text="{x:Static localization:Strings.Profile}" />
                                <TextBox Grid.Column="2" Grid.Row="10">
                                    <TextBox.Text>
                                        <Binding Path="PuTTY_Profile" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:NoSpacesValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="12" Text="{x:Static localization:Strings.AdditionalCommandLine}" />
                                <TextBox Grid.Column="2" Grid.Row="12" Text="{Binding PuTTY_AdditionalCommandLine}" Style="{StaticResource DefaultTextBox}" />
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.TightVNC}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding TightVNC_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding TightVNC_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding TightVNC_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxTightVNCHost" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding TightVNC_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding TightVNC_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding TightVNC_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="TightVNC_Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static localization:Strings.Port}" />
                                <TextBox x:Name="TextBoxTightVNCPort" Grid.Column="2" Grid.Row="4" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExamplePort5900}">
                                    <TextBox.Text>
                                        <Binding Path="TightVNC_Port" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:PortValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.WakeOnLAN}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding WakeOnLAN_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding WakeOnLAN_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.MACAddress}" />
                                <TextBox x:Name="TextBoxWakeOnLANMACAddress" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleMACAddress}">
                                    <TextBox.Text>
                                        <Binding Path="WakeOnLAN_MACAddress" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:MACAddressValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Broadcast}" />
                                <TextBox x:Name="TextBoxWakeOnLANBroadcast" Grid.Column="2" Grid.Row="2" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleIPv4Broadcast}">
                                    <TextBox.Text>
                                        <Binding Path="WakeOnLAN_Broadcast" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:IPv4AddressValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <TextBlock Grid.Column="0" Grid.Row="4" Text="{x:Static localization:Strings.Port}" />
                                <TextBox x:Name="TextBoxWakeOnLANPort" Grid.Column="2" Grid.Row="4" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExamplePort7}">
                                    <TextBox.Text>
                                        <Binding Path="WakeOnLAN_Port" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:PortValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.HTTPHeaders}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding HTTPHeaders_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding HTTPHeaders_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Host}" />
                                <TextBox x:Name="TextBoxHTTPHeadersWebsite" Grid.Column="2" Grid.Row="0" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleWebsiteUri}">
                                    <TextBox.Text>
                                        <Binding Path="HTTPHeaders_Website" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                            <Binding.ValidationRules>
                                                <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                <validators:HttpAndHttpsUriValidator ValidatesOnTargetUpdated="True" />
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
            <TabItem Header="{x:Static localization:Strings.Whois}">
                <ScrollViewer Style="{StaticResource DefaultScrollViewer}" Margin="0,20,0,0">
                    <StackPanel>
                        <Grid Margin="0,0,0,10">
                            <Grid.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="34" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.Enable}" />
                            <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding Whois_Enabled}" />
                        </Grid>
                        <Separator Background="{DynamicResource GrayBrush8}" Margin="0,0,0,10" />
                        <StackPanel IsEnabled="{Binding Whois_Enabled}">
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CenterTextBlock}" />
                                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
                                </Grid.Resources>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="10" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="34" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static localization:Strings.InheritHostFromDefault}" />
                                <mah:ToggleSwitch Grid.Column="2" Grid.Row="0" OnLabel="" OffLabel="" IsChecked="{Binding Whois_InheritHost}" />
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="{x:Static localization:Strings.Domain}" />
                                <TextBox x:Name="TextBoxWhoisDomain" Grid.Column="2" Grid.Row="2" IsEnabled="{Binding Whois_InheritHost, Converter={StaticResource BooleanReverseConverter}}" mah:TextBoxHelper.Watermark="{x:Static localization:Strings.ExampleHostname}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Whois_InheritHost}" Value="True">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Host" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Whois_InheritHost}" Value="False">
                                                    <Setter Property="TextBox.Text">
                                                        <Setter.Value>
                                                            <Binding Path="Whois_Domain" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                                                                <Binding.ValidationRules>
                                                                    <validators:EmptyValidator ValidatesOnTargetUpdated="True" />
                                                                </Binding.ValidationRules>
                                                            </Binding>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </ScrollViewer>
            </TabItem>
        </TabControl>
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Content="{x:Static localization:Strings.Cancel}" Command="{Binding CancelCommand}" IsCancel="True" Style="{StaticResource DefaultButton}" />
            <Button Content="{x:Static localization:Strings.Save}" Command="{Binding SaveCommand}" IsDefault="True" Margin="10,0,0,0">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource HighlightedButton}">
                        <Style.Triggers>
                            <!-- General -->
                            <DataTrigger Binding="{Binding ElementName=TextBoxName,Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=TextBoxHost,Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=ComboBoxGroup,Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <!-- No tab enabled -->
                            <DataTrigger Binding="{Binding IsTabEnabled}" Value="False">
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <!-- Network Interface -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticIPAddress}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxNetworkInterfaceIPAddress, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticIPAddress}" Value="True" />
                                    <Condition Binding="{Binding ElementName=ComboBoxNetworkInterfaceSubnetmaskOrCidr, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticIPAddress}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxNetworkInterfaceGateway, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticDNS}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxNetworkInterfacePrimaryDNSServer, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding NetworkInterface_Enabled}" Value="True" />
                                    <Condition Binding="{Binding NetworkInterface_EnableStaticDNS}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxNetworkInterfaceSecondaryDNSServer, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- IP Scanner -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IPScanner_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding IPScanner_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxIPScannerIPRange, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Port Scanner -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PortScanner_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding PortScanner_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxPortScannerHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PortScanner_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxPortScannerPorts, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Ping -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Ping_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding Ping_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxPingHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Traceroute -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Traceroute_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding Traceroute_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxTracerouteHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- DNS Lookup -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding DNSLookup_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding DNSLookup_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxDNSLookupHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Remote Desktop -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RemoteDesktop_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding RemoteDesktop_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxRemoteDesktopHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- PuTTY -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PuTTY_Enabled}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_UseSerial}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxPuTTYSerialLine, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PuTTY_Enabled}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_UseSerial}" Value="True" />
                                    <Condition Binding="{Binding ElementName=TextBoxPuTTYBaud, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PuTTY_Enabled}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_UseSerial}" Value="False" />
                                    <Condition Binding="{Binding PuTTY_InheritHost}" Value="False" />
                                    <Condition Binding="{Binding ElementName=TextBoxPuTTYHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding PuTTY_Enabled}" Value="True" />
                                    <Condition Binding="{Binding PuTTY_UseSerial}" Value="False" />
                                    <Condition Binding="{Binding ElementName=TextBoxPuTTYPort, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Traceroute -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding TightVNC_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding TightVNC_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxTightVNCHost, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding TightVNC_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxTightVNCPort, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Wake on LAN -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding WakeOnLAN_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxWakeOnLANMACAddress, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding WakeOnLAN_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxWakeOnLANBroadcast, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding WakeOnLAN_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxWakeOnLANPort, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- HTTPHeaders -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding HTTPHeaders_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TextBoxHTTPHeadersWebsite, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <!-- Whois -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Whois_Enabled}" Value="True"/>
                                    <Condition Binding="{Binding Whois_InheritHost}" Value="False"/>
                                    <Condition Binding="{Binding ElementName=TextBoxWhoisDomain, Path=(Validation.HasError)}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="False" />
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>
    </Grid>
</UserControl>
